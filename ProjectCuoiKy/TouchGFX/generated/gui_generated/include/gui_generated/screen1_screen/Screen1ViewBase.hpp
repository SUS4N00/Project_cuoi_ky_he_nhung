/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/progress_indicators/LineProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <gui/containers/ContainerEntity.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void functionSpell()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Container containerGround;
    touchgfx::Image background;
    touchgfx::Container containerSpell;
    touchgfx::Image image1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButton1;
    touchgfx::TextAreaWithOneWildcard spellCounter;
    touchgfx::Container containerSlideBar;
    touchgfx::Image image2;
    touchgfx::LineProgress lineProgressPass;
    touchgfx::PainterRGB565Bitmap lineProgressPassPainter;
    touchgfx::LineProgress lineProgressLevel;
    touchgfx::PainterRGB565Bitmap lineProgressLevelPainter;
    touchgfx::TextAreaWithOneWildcard textLV;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButton2;
    touchgfx::TextArea textArea1;
    touchgfx::Button button1;
    touchgfx::Button button2;
    ContainerEntity containerEntity1_0;
    ContainerEntity containerEntity1_1;
    ContainerEntity containerEntity1_2;
    ContainerEntity containerEntity1_3;
    ContainerEntity containerEntity1_4;
    ContainerEntity containerEntity1_5;
    ContainerEntity containerEntity1_6;
    ContainerEntity containerEntity1_7;
    ContainerEntity containerEntity1_8;
    ContainerEntity containerEntity1_9;
    ContainerEntity containerEntity1_10;
    ContainerEntity containerEntity1_11;
    ContainerEntity containerEntity1_12;
    ContainerEntity containerEntity1_13;
    ContainerEntity containerEntity1_14;
    ContainerEntity containerEntity1_15;
    ContainerEntity containerEntity1_16;
    ContainerEntity containerEntity1_17;
    ContainerEntity containerEntity1_18;
    ContainerEntity containerEntity1_19;
    ContainerEntity containerEntity1_20;
    ContainerEntity containerEntity1_21;
    ContainerEntity containerEntity1_22;
    ContainerEntity containerEntity1_23;
    ContainerEntity containerEntity1_24;
    ContainerEntity containerEntity1_25;
    ContainerEntity containerEntity1_26;
    ContainerEntity containerEntity1_27;
    ContainerEntity containerEntity1_28;
    ContainerEntity containerEntity1_29;
    ContainerEntity containerEntity1_30;
    ContainerEntity containerEntity1_31;
    ContainerEntity containerEntity1_32;
    ContainerEntity containerEntity1_33;
    ContainerEntity containerEntity1_34;
    ContainerEntity containerEntity1_35;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonUp;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonDown;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonLeft;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonRight;

    /*
     * Wildcard Buffers
     */
    static const uint16_t SPELLCOUNTER_SIZE = 10;
    touchgfx::Unicode::UnicodeChar spellCounterBuffer[SPELLCOUNTER_SIZE];
    static const uint16_t TEXTLV_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textLVBuffer[TEXTLV_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SCREEN1VIEWBASE_HPP
